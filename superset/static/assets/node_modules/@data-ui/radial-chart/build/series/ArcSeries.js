Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = ArcSeries;

var _shape = require('@vx/shape');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _ArcLabel = require('../label/ArcLabel');

var _ArcLabel2 = _interopRequireDefault(_ArcLabel);

var _callOrValue = require('../util/callOrValue');

var _callOrValue2 = _interopRequireDefault(_callOrValue);

var _fillScaleFactory = require('../util/fillScaleFactory');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var grayScale = (0, _fillScaleFactory.singleHueScaleFactory)();

var propTypes = {
  data: _propTypes2['default'].arrayOf(_propTypes2['default'].shape({
    label: _propTypes2['default'].string
  })).isRequired,
  pieValue: _propTypes2['default'].func.isRequired, // (d) => pie value
  pieSort: _propTypes2['default'].func,

  radius: _propTypes2['default'].number, // likely passed by parent
  innerRadius: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].number]), // (radius) => num
  outerRadius: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].number]), // (radius) => num
  labelRadius: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].number]), // (radius) => num
  labelComponent: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].element]),
  label: _propTypes2['default'].func, // (arc) => node

  stroke: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].string]),
  strokeWidth: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].number]),
  fill: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].string]),
  fillOpacity: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].number]),

  padAngle: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].number]),
  padRadius: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].number]),
  cornerRadius: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].number])
};

var defaultProps = {
  radius: 300,
  pieSort: null,
  innerRadius: function () {
    function innerRadius(radius) {
      return radius * 0.5;
    }

    return innerRadius;
  }(),
  outerRadius: function () {
    function outerRadius(radius) {
      return radius * 0.9;
    }

    return outerRadius;
  }(),
  labelRadius: function () {
    function labelRadius(radius) {
      return radius * 0.75;
    }

    return labelRadius;
  }(),
  cornerRadius: 3,
  fill: function () {
    function fill(arc) {
      return arc.data && arc.data.label ? grayScale(arc.data.label) : '#dddddd';
    }

    return fill;
  }(),
  fillOpacity: 1,
  stroke: '#ffffff',
  strokeWidth: 1,
  labelComponent: _react2['default'].createElement(_ArcLabel2['default'], null),
  label: null,
  padAngle: null,
  padRadius: null
};

function ArcSeries(_ref) {
  var data = _ref.data,
      radius = _ref.radius,
      pieValue = _ref.pieValue,
      pieSort = _ref.pieSort,
      innerRadius = _ref.innerRadius,
      outerRadius = _ref.outerRadius,
      labelRadius = _ref.labelRadius,
      fill = _ref.fill,
      fillOpacity = _ref.fillOpacity,
      cornerRadius = _ref.cornerRadius,
      padAngle = _ref.padAngle,
      padRadius = _ref.padRadius,
      stroke = _ref.stroke,
      strokeWidth = _ref.strokeWidth,
      label = _ref.label,
      labelComponent = _ref.labelComponent,
      restProps = _objectWithoutProperties(_ref, ['data', 'radius', 'pieValue', 'pieSort', 'innerRadius', 'outerRadius', 'labelRadius', 'fill', 'fillOpacity', 'cornerRadius', 'padAngle', 'padRadius', 'stroke', 'strokeWidth', 'label', 'labelComponent']);

  return _react2['default'].createElement(
    'g',
    null,
    _react2['default'].createElement(_shape.Arc, _extends({
      data: data,
      pieValue: pieValue,
      pieSort: pieSort,
      outerRadius: (0, _callOrValue2['default'])(outerRadius, radius),
      innerRadius: (0, _callOrValue2['default'])(innerRadius, radius),
      fill: fill,
      fillOpacity: fillOpacity,
      stroke: stroke,
      strokeWidth: strokeWidth,
      cornerRadius: cornerRadius,
      padAngle: padAngle,
      padRadius: padRadius
    }, restProps)),
    label && labelComponent && _react2['default'].createElement(_shape.Arc, {
      data: data,
      pieValue: pieValue,
      pieSort: pieSort,
      outerRadius: (0, _callOrValue2['default'])(labelRadius, radius),
      innerRadius: (0, _callOrValue2['default'])(labelRadius, radius),
      fill: 'none',
      fillOpacity: 0,
      stroke: 'none',
      strokeWidth: 0,
      centroid: function () {
        function centroid(_centroid2, arc) {
          var _centroid = _slicedToArray(_centroid2, 2),
              x = _centroid[0],
              y = _centroid[1];

          var labelElement = label(arc);
          if (arc.endAngle - arc.startAngle < 0.1 || !labelElement) return null;
          return _react2['default'].cloneElement(labelComponent, { x: x, y: y, arc: arc }, labelElement);
        }

        return centroid;
      }()
    })
  );
}

ArcSeries.propTypes = propTypes;
ArcSeries.defaultProps = defaultProps;
ArcSeries.displayName = 'ArcSeries';