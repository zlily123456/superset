'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _aphrodite = require('aphrodite');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var unit = 8;

var styles = _aphrodite.StyleSheet.create({
  container: {
    fontSize: 14,
    padding: 0,
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'flex-start'
  },

  inline: {
    display: 'inline-block'
  },

  label: {
    fontWeight: 700,
    paddingRight: 1 * unit
  },

  buttons: {
    display: 'inherit'
  },

  spacer: {
    width: 0.5 * unit
  }
});

var propTypes = {
  min: _propTypes2.default.number,
  max: _propTypes2.default.number,
  inline: _propTypes2.default.bool,
  formatValue: _propTypes2.default.func,
  value: _propTypes2.default.number,
  onChange: _propTypes2.default.func,
  disableZero: _propTypes2.default.bool,
  labelWidth: _propTypes2.default.number
};

var defaultProps = {
  min: -3,
  max: 3,
  value: 0,
  inline: true,
  onChange: function onChange() {},
  formatValue: function formatValue(val) {
    return val;
  },
  disableZero: false,
  labelWidth: null
};

var StepIncrementer = function (_React$Component) {
  _inherits(StepIncrementer, _React$Component);

  function StepIncrementer(props) {
    _classCallCheck(this, StepIncrementer);

    var _this = _possibleConstructorReturn(this, (StepIncrementer.__proto__ || Object.getPrototypeOf(StepIncrementer)).call(this, props));

    _this.incrementValue = _this.incrementValue.bind(_this);
    _this.decrementValue = _this.decrementValue.bind(_this);

    var value = props.value,
        disableZero = props.disableZero;

    _this.state = {
      value: disableZero && value === 0 ? 1 : value
    };
    return _this;
  }

  _createClass(StepIncrementer, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.value !== this.state.value) {
        this.setState({
          value: nextProps.value
        });
      }
    }
  }, {
    key: 'incrementValue',
    value: function incrementValue() {
      var _props = this.props,
          onChange = _props.onChange,
          max = _props.max,
          disableZero = _props.disableZero;

      if (this.state.value < max) {
        var value = this.state.value + 1;
        if (value === 0 && disableZero) value += 1;
        this.setState({ value: value });
        if (onChange) onChange(value);
      }
    }
  }, {
    key: 'decrementValue',
    value: function decrementValue() {
      var _props2 = this.props,
          onChange = _props2.onChange,
          min = _props2.min,
          disableZero = _props2.disableZero;

      if (this.state.value > min) {
        var value = this.state.value - 1;
        if (value === 0 && disableZero) value -= 1;
        this.setState({ value: value });
        if (onChange) onChange(value);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          min = _props3.min,
          max = _props3.max,
          formatValue = _props3.formatValue,
          inline = _props3.inline,
          width = _props3.labelWidth;
      var value = this.state.value;


      var inner = _react2.default.createElement(
        'div',
        { className: (0, _aphrodite.css)(styles.container) },
        _react2.default.createElement(
          'div',
          { className: (0, _aphrodite.css)(styles.label), style: width && { width: width } },
          formatValue(value)
        ),
        _react2.default.createElement(
          'div',
          { className: (0, _aphrodite.css)(styles.buttons) },
          _react2.default.createElement(
            _Button2.default,
            {
              onClick: this.decrementValue,
              disabled: value <= min,
              round: true,
              small: true
            },
            '-'
          ),
          _react2.default.createElement('div', { className: (0, _aphrodite.css)(styles.spacer) }),
          _react2.default.createElement(
            _Button2.default,
            {
              onClick: this.incrementValue,
              disabled: value >= max,
              round: true,
              small: true
            },
            '+'
          )
        )
      );

      return inline ? _react2.default.createElement(
        'div',
        { className: (0, _aphrodite.css)(styles.inline) },
        inner
      ) : inner;
    }
  }]);

  return StepIncrementer;
}(_react2.default.Component);

StepIncrementer.propTypes = propTypes;
StepIncrementer.defaultProps = defaultProps;

exports.default = StepIncrementer;