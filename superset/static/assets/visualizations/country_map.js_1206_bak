import d3 from 'd3';
import './country_map.css';
import { colorScalerFactory } from '../javascripts/modules/colors';


function countryMapChart(slice, payload) {
  // CONSTANTS
  
  const fd = payload.form_data;
  let path;
  let g;
  let bigText;
  let resultText;
  const container = slice.container;
  const data = payload.data;

  const colorScaler = colorScalerFactory(fd.linear_color_scheme, data, v => v.metric);
  const colorMap = {};
  data.forEach((d) => {
    colorMap[d.country_id] = colorScaler(d.metric);
  });
  const colorFn = d => colorMap[d.properties.id] || 'none';

  let centered;

  //add_derek

  //var height = 600;
  //var width = 800;
  var scale = 1;
  var projection = d3.geo.mercator()    //tou  ying 
  .center([100, 36])
  .scale(600)
  .translate([slice.width() / 2, slice.height() / 2]);

  path = d3.geo.path().projection(projection);  //lu jing shengchengqi
  
  //add_end
  d3.select(slice.selector).selectAll('*').remove(); //yuan su xuanzeqi
  //svg=div
  const div = d3.select(slice.selector)
    .append('svg:svg')
    .attr('width', slice.width())
    .attr('height', slice.height())
    .attr('preserveAspectRatio', 'xMidYMid meet'); //queding yuansu  quyu
  
  container.css('height', slice.height());
  container.css('width', slice.width());
  function clicked(d) {
    var x, y, k;
    let bigTextX;
    let bigTextY;
    let bigTextSize;
    let resultTextX;
    let resultTextY;
    console.log("d="+d) 
    if (d && centered !== d) {
      var centroid = path.centroid(d);
      x = centroid[0];
      y = centroid[1];
      bigTextX = centroid[0];
      bigTextY = centroid[1] - 40;
      resultTextX = centroid[0];
      resultTextY = centroid[1] - 40;
      bigTextSize = '6px';
      k = 4;
      centered = d;
      //add_derek_before  
      //if (d.properties.id == "46") {
      //  y = y + 10;
      //}
      if (d.properties.scale) {
        k = d.properties.scale;
      } else {
        k = scale
      }
      scale = k;
      centered = d;
      $(".re-show").css("display", "block");
      mapChange("open", d);
    } else {
      x = slice.width() / 2;
      y = slice.height() / 2;
      k = 1;
      scale = 1;
      centered = null;
      $(".re-show").css("display", "none");
      mapChange("close");
    }

    g.selectAll("path")
      .classed("active", centered && function(d) {
      return d === centered;
    });

    g.transition()
      .duration(750)
      .attr("transform", "translate(" + slice.width() / 2 + "," +slice.height() / 2 + ")scale(" + k + ")translate(" + -x + "," + -y + ")")
      .style("stroke-width", 1.5 / k + "px");
  };
  
  
  function mapChange(flag, d) 
  {
    if (flag == "open") {
      var disId = d.properties.id;

      if (disId.length < 3) {
        chinajson.features.forEach(function(n) {
          if (n.properties.id.length > 2 && n.properties.id.substr(0, 2) === disId) {
            d3.select("#path" + n.properties.id)
              .attr("style", "display:block")
              .attr("stroke-width", 1 / scale + "px")
              .attr("fill", "#1b5c5b");
            d3.select("#text" + n.properties.id)
              .attr("style", "display:block")
              .attr("font-size", 0.8 + "px");
          } else {
            if (n.properties.id.length <= 2 && n.properties.id != disId) {
              d3.select(".point-info").attr("style", "display:none;");
              d3.select("#path" + n.properties.id)
                .attr("style", "opacity:0.2")
                .attr("stroke-width", "0.3px");
              d3.select("#text" + n.properties.id)
                .attr("style", "display:none")
                .attr("font-size", "3px");
            } else {
              d3.select("#path" + n.properties.id)
                .attr("style", "display:none")
                .attr("stroke-width", "0.2px");
              d3.select("#text" + n.properties.id)
                .attr("style", "display:none")
                .attr("font-size", "1px");
            }
          }
        })
      }
    } else {

      d3.selectAll(".location").attr("style", "display:none");
      d3.selectAll("text").attr("font-size", "14px");
      d3.selectAll("path").attr("stroke-width", "1px");
      d3.selectAll(".distribution").attr("style", "display:block");
    }
  };

 
  div.append('rect')
    .attr('class', 'background')
    .attr('width', slice.width())
    .attr('height', slice.height())
    .on('click', clicked);
  //g=mapG
  g = div.append('g')
    .attr('id','g');
  //texts = mapLayer
  const mapLayer = g.append('g')
    .classed('map-layer', true);
  bigText = g.append('text')
    .classed('big-text', true)
    .attr('x', 20)
    .attr('y', 45);
  resultText = g.append('text')
    .classed('result-text', true)
    .attr('x', 20)
    .attr('y', 60);
  const mouseenter = function (d) {
    // Darken color
    let c = colorFn(d);
    if (c !== 'none') {
      c = d3.rgb(c).darker().toString();
    }   
    d3.select(this).style('fill', c); 
    selectAndDisplayNameOfRegion(d);
    const result = data.filter(region => region.country_id === d.properties.id);
    updateMetrics(result);
  };

  const updateMetrics = function (region) {
    if (region.length > 0) {
      resultText.text(d3.format(',')(region[0].metric));
    }   
  }; 

  const mouseout = function () {
    d3.select(this).style('fill', colorFn);
    bigText.text('');
    resultText.text('');
  }; 

  const updateMetrics = function (region) {
    if (region.length > 0) {
      resultText.text(d3.format(',')(region[0].metric));
    }   
  }; 

  const selectAndDisplayNameOfRegion = function (feature) {
    let name = '';
    if (feature && feature.properties) {
      if (feature.properties.ID_2) {
        name = feature.properties.name;
      } else {
        name = feature.properties.NAME_1;
      }   
    }   
    bigText.text(name);
  }; 

  const url = `/static/assets/visualizations/countries/${fd.select_country.toLowerCase()}.geojson`;
  d3.json(url, function (error, mapData) {
    const features = mapData.features;
    const center = d3.geo.centroid(mapData);
    let scale = 150;
    let offset = [slice.width() / 2, slice.height() / 2];
    let projection = d3.geo.mercator().scale(scale).center(center)
      .translate(offset);

    path = path.projection(projection);

    const bounds = path.bounds(mapData);
    const hscale = scale * slice.width() / (bounds[1][0] - bounds[0][0]);
    const vscale = scale * slice.height() / (bounds[1][1] - bounds[0][1]);
    scale = (hscale < vscale) ? hscale : vscale;
    const offsetWidth = slice.width() - (bounds[0][0] + bounds[1][0]) / 2;
    const offsetHeigth = slice.height() - (bounds[0][1] + bounds[1][1]) / 2;
    offset = [offsetWidth, offsetHeigth];
    projection = d3.geo.mercator().center(center).scale(scale).translate(offset);
    path = path.projection(projection);

    // Draw each province as a path
    mapLayer.selectAll('path')
    //g.selectAll('path')
      .data(features)
      .enter().append('path')
      .attr('d', path)
      .attr('class', 'region')
      .attr('vector-effect', 'non-scaling-stroke')
      .style('fill', colorFn)
      .on('mouseenter', mouseenter)
      .on('mouseout', mouseout)
      .on('click', clicked);
  });
  container.show();
}

module.exports = countryMapChart;
